//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinCertes.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Program {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Program() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WinCertes.Resources.Program", typeof(Program).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error.
        /// </summary>
        internal static string Error {
            get {
                return ResourceManager.GetString("Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Typical usage: WinCertes.exe -a -e me@example.com -d test1.example.com -d test2.example.com -p
        ///This will automatically create and register account with email me@example.com, and
        ///request the certificate for test1.example.com and test2.example.com, then import it into
        ///Windows Certificate store (machine context), and finally set a Scheduled Task to manage renewal.
        ///
        ///&quot;WinCertes.exe -d test1.example.com -d test2.example.com -r&quot; will revoke that certificate..
        /// </summary>
        internal static string ExampleUsage {
            get {
                return ResourceManager.GetString("ExampleUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not register ACME service account..
        /// </summary>
        internal static string FailedRegisterAccount {
            get {
                return ResourceManager.GetString("FailedRegisterAccount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify either an HTTP or a DNS validation method..
        /// </summary>
        internal static string HTTPorDNS {
            get {
                return ResourceManager.GetString("HTTPorDNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WinCertes.exe: Launched without command line options, use -? to display them. Launching GUI....
        /// </summary>
        internal static string LaunchGUI {
            get {
                return ResourceManager.GetString("LaunchGUI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WinCertes.exe: Must be launched as Administrator..
        /// </summary>
        internal static string NoAdmin {
            get {
                return ResourceManager.GetString("NoAdmin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WinCertes.exe: Must be launched as Administrator.
        ///Hold down the Ctrl and Shift keys whilst you Click the WinCertes icon in the Start Menu..
        /// </summary>
        internal static string NoAdminGUI {
            get {
                return ResourceManager.GetString("NoAdminGUI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate not bound to any IIS site..
        /// </summary>
        internal static string NoBound {
            get {
                return ResourceManager.GetString("NoBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use no command line arguments to launch the GUI
        ///.
        /// </summary>
        internal static string NoCLIforGUI {
            get {
                return ResourceManager.GetString("NoCLIforGUI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one domain must be specified.
        /// </summary>
        internal static string NoDomains {
            get {
                return ResourceManager.GetString("NoDomains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find certificate matching primary domain {0}. Please check the Subject CN of the certificate you wish to revoke..
        /// </summary>
        internal static string NoFindCertificateDomain {
            get {
                return ResourceManager.GetString("NoFindCertificateDomain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find certificate matching serial {0}. Please check the Certificate Store..
        /// </summary>
        internal static string NoFindCertificateSerial {
            get {
                return ResourceManager.GetString("NoFindCertificateSerial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IIS site name to bind the certificate to, e.g. &quot;Default Web Site&quot;. Defaults to no binding.
        /// </summary>
        internal static string OptionBindName {
            get {
                return ResourceManager.GetString("OptionBindName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IIS site port to bind the certificate to, e.g. 443. Defaults to 443, used only if -b is specified.
        /// </summary>
        internal static string OptionBindPort {
            get {
                return ResourceManager.GetString("OptionBindPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import the certificate into specified csp. By default WinCertes imports in the default CSP.
        /// </summary>
        internal static string OptionCSP {
            get {
                return ResourceManager.GetString("OptionCSP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the domain(s) to enroll (mandatory).
        /// </summary>
        internal static string OptionDomain {
            get {
                return ResourceManager.GetString("OptionDomain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the account email to be used for ACME requests (optional, defaults to no email).
        /// </summary>
        internal static string OptionEmail {
            get {
                return ResourceManager.GetString("OptionEmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the Execution Policy to run the PowerShell Script file e.g. Unrestricted (default=Undefined).
        /// </summary>
        internal static string OptionExecPolicy {
            get {
                return ResourceManager.GetString("OptionExecPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to manages additional certificate(s) instead of the default one, with its own settings. Add an integer index optionally to manage more certs.
        /// </summary>
        internal static string OptionExtra {
            get {
                return ResourceManager.GetString("OptionExtra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to displays this help screen.
        /// </summary>
        internal static string OptionHelp {
            get {
                return ResourceManager.GetString("OptionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to listen on port {N} in standalone mode (for use with -a switch, default 80).
        /// </summary>
        internal static string OptionListenPort {
            get {
                return ResourceManager.GetString("OptionListenPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to does not import the certificate into CSP. Use with caution, at your own risks. REVOCATION WILL NOT WORK IN THAT MODE.
        /// </summary>
        internal static string OptionNoCSP {
            get {
                return ResourceManager.GetString("OptionNoCSP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to should WinCertes create the Windows Scheduler task to handle certificate renewal (default=no).
        /// </summary>
        internal static string OptionPeriodic {
            get {
                return ResourceManager.GetString("OptionPeriodic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to trigger certificate renewal {N} days before expiration, default 30.
        /// </summary>
        internal static string OptionRenewal {
            get {
                return ResourceManager.GetString("OptionRenewal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to reset all configuration parameters.
        /// </summary>
        internal static string OptionReset {
            get {
                return ResourceManager.GetString("OptionReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to should WinCertes revoke the certificate identified by its domains (to be used only with -d). {REASON} is an optional integer between 0 and 5.
        /// </summary>
        internal static string OptionRevoke {
            get {
                return ResourceManager.GetString("OptionRevoke", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PowerShell Core Script file e.g. &quot;C:\Temp\script.ps1&quot; to execute upon successful enrollment (default=none).
        /// </summary>
        internal static string OptionScriptFile {
            get {
                return ResourceManager.GetString("OptionScriptFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the ACME Service URI to be used (optional, defaults to Let&apos;s Encrypt).
        /// </summary>
        internal static string OptionService {
            get {
                return ResourceManager.GetString("OptionService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to sets configuration options in the form key:value.
        /// </summary>
        internal static string OptionSetOpt {
            get {
                return ResourceManager.GetString("OptionSetOpt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to show current configuration parameters.
        /// </summary>
        internal static string OptionShow {
            get {
                return ResourceManager.GetString("OptionShow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to add the Server Name Indication Ssl Flag when binding to IIS.
        /// </summary>
        internal static string OptionSNI {
            get {
                return ResourceManager.GetString("OptionSNI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to should WinCertes create its own WebServer for validation. Activates HTTP validation mode. WARNING: it will use port 80 unless -l is specified.
        /// </summary>
        internal static string OptionStandalone {
            get {
                return ResourceManager.GetString("OptionStandalone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to toggles the local web server use and sets its {ROOT} directory (default c:\inetpub\wwwroot). Activates HTTP validation mode.
        /// </summary>
        internal static string OptionWebServer {
            get {
                return ResourceManager.GetString("OptionWebServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Revocation Reason is a number between 0 and 5.
        /// </summary>
        internal static string RevokeReason {
            get {
                return ResourceManager.GetString("RevokeReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully bound certificate for IIS site: .
        /// </summary>
        internal static string SuccessBind {
            get {
                return ResourceManager.GetString("SuccessBind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate with serial {0} for domains {1} has been successfully revoked..
        /// </summary>
        internal static string SuccessRevokeSerialDomains {
            get {
                return ResourceManager.GetString("SuccessRevokeSerialDomains", resourceCulture);
            }
        }
    }
}
