<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ExampleUsage" xml:space="preserve">
    <value>
Typical usage: WinCertes.exe -a -e me@example.com -d test1.example.com -d test2.example.com -p
This will automatically create and register account with email me@example.com, and
request the certificate for test1.example.com and test2.example.com, then import it into
Windows Certificate store (machine context), and finally set a Scheduled Task to manage renewal.

"WinCertes.exe -d test1.example.com -d test2.example.com -r" will revoke that certificate.</value>
  </data>
  <data name="FailedRegisterAccount" xml:space="preserve">
    <value>Could not register ACME service account.</value>
  </data>
  <data name="HTTPorDNS" xml:space="preserve">
    <value>Specify either an HTTP or a DNS validation method.</value>
  </data>
  <data name="LaunchGUI" xml:space="preserve">
    <value>WinCertes.exe: Launched without command line options, use -? to display them. Launching GUI...</value>
  </data>
  <data name="NoAdmin" xml:space="preserve">
    <value>WinCertes.exe: Must be launched as Administrator.</value>
  </data>
  <data name="NoAdminGUI" xml:space="preserve">
    <value>WinCertes.exe: Must be launched as Administrator.
Hold down the Ctrl and Shift keys whilst you Click the WinCertes icon in the Start Menu.</value>
  </data>
  <data name="NoBound" xml:space="preserve">
    <value>Certificate not bound to any IIS site.</value>
  </data>
  <data name="NoCLIforGUI" xml:space="preserve">
    <value>Use no command line arguments to launch the GUI
</value>
  </data>
  <data name="NoDomains" xml:space="preserve">
    <value>At least one domain must be specified</value>
  </data>
  <data name="NoFindCertificateDomain" xml:space="preserve">
    <value>Could not find certificate matching primary domain {0}. Please check the Subject CN of the certificate you wish to revoke.</value>
  </data>
  <data name="NoFindCertificateSerial" xml:space="preserve">
    <value>Could not find certificate matching serial {0}. Please check the Certificate Store.</value>
  </data>
  <data name="OptionBindName" xml:space="preserve">
    <value>IIS site name to bind the certificate to, e.g. "Default Web Site". Defaults to no binding</value>
  </data>
  <data name="OptionBindPort" xml:space="preserve">
    <value>IIS site port to bind the certificate to, e.g. 443. Defaults to 443, used only if -b is specified</value>
  </data>
  <data name="OptionCSP" xml:space="preserve">
    <value>import the certificate into specified csp. By default WinCertes imports in the default CSP</value>
  </data>
  <data name="OptionDomain" xml:space="preserve">
    <value>the domain(s) to enroll (mandatory)</value>
  </data>
  <data name="OptionEmail" xml:space="preserve">
    <value>the account email to be used for ACME requests (optional, defaults to no email)</value>
  </data>
  <data name="OptionExecPolicy" xml:space="preserve">
    <value>Specify the Execution Policy to run the PowerShell Script file e.g. Unrestricted (default=Undefined)</value>
  </data>
  <data name="OptionExtra" xml:space="preserve">
    <value>manages additional certificate(s) instead of the default one, with its own settings. Add an integer index optionally to manage more certs</value>
  </data>
  <data name="OptionHelp" xml:space="preserve">
    <value>displays this help screen</value>
  </data>
  <data name="OptionListenPort" xml:space="preserve">
    <value>listen on port {N} in standalone mode (for use with -a switch, default 80)</value>
  </data>
  <data name="OptionNoCSP" xml:space="preserve">
    <value>does not import the certificate into CSP. Use with caution, at your own risks. REVOCATION WILL NOT WORK IN THAT MODE</value>
  </data>
  <data name="OptionPeriodic" xml:space="preserve">
    <value>should WinCertes create the Windows Scheduler task to handle certificate renewal (default=no)</value>
  </data>
  <data name="OptionRenewal" xml:space="preserve">
    <value>trigger certificate renewal {N} days before expiration, default 30</value>
  </data>
  <data name="OptionReset" xml:space="preserve">
    <value>reset all configuration parameters</value>
  </data>
  <data name="OptionRevoke" xml:space="preserve">
    <value>should WinCertes revoke the certificate identified by its domains (to be used only with -d). {REASON} is an optional integer between 0 and 5</value>
  </data>
  <data name="OptionScriptFile" xml:space="preserve">
    <value>PowerShell Core Script file e.g. "C:\Temp\script.ps1" to execute upon successful enrollment (default=none)</value>
  </data>
  <data name="OptionService" xml:space="preserve">
    <value>the ACME Service URI to be used (optional, defaults to Let's Encrypt)</value>
  </data>
  <data name="OptionSetOpt" xml:space="preserve">
    <value>sets configuration options in the form key:value</value>
  </data>
  <data name="OptionShow" xml:space="preserve">
    <value>show current configuration parameters</value>
  </data>
  <data name="OptionSNI" xml:space="preserve">
    <value>add the Server Name Indication Ssl Flag when binding to IIS</value>
  </data>
  <data name="OptionStandalone" xml:space="preserve">
    <value>should WinCertes create its own WebServer for validation. Activates HTTP validation mode. WARNING: it will use port 80 unless -l is specified</value>
  </data>
  <data name="OptionWebServer" xml:space="preserve">
    <value>toggles the local web server use and sets its {ROOT} directory (default c:\inetpub\wwwroot). Activates HTTP validation mode</value>
  </data>
  <data name="RevokeReason" xml:space="preserve">
    <value>Revocation Reason is a number between 0 and 5</value>
  </data>
  <data name="SuccessBind" xml:space="preserve">
    <value>Successfully bound certificate for IIS site: </value>
  </data>
  <data name="SuccessRevokeSerialDomains" xml:space="preserve">
    <value>Certificate with serial {0} for domains {1} has been successfully revoked.</value>
  </data>
</root>